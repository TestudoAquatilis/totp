#!/usr/bin/python

import argparse
import configparser
import os
import sys
import time
import onetimepass

def initconfig (configfile, interactive):
    if (os.path.isfile (configfile)):
        return

    if (not interactive):
        return

    ans = input ("No config file found at %s. Create? (Y/n) " % configfile)
    if (not (ans == 'Y' or ans == '' or ans == 'y')):
        exit(0)

    dirname = os.path.dirname(configfile)
    if (dirname != ''):
        os.makedirs (dirname)

    config = configparser.ConfigParser()
    config['display'] = {'steps-pre': '2', 'steps-post': '3', 'full-time': 'no'}
    config['secrets'] = {'dummy': 'ABCDABCDABCDABCD'}

    with open(configfile, 'w') as fdconfigfile:
        config.write (fdconfigfile)

    print("Create initial config %s." % configfile)
    print("Please add your secret-id.")
    exit(0)

def getconfig (configfile):

    config = configparser.ConfigParser()
    config.read(configfile)

    if 'secrets' not in config.sections():
        config['secrets'] = {}
    if 'display' not in config.sections():
        config['display'] = {}

    return config

def printtotp (secret, steps_pre, steps_post, full_time):
    # manual timesteps
    tsecs       = int(time.time())
    tsecs_round = (tsecs // 30) * 30
    offset      = tsecs - tsecs_round

    for step in range (-steps_pre, steps_post+1):
        deltat     = 30 * step
        token      = onetimepass.get_totp(secret, clock=(tsecs + deltat))
        window_start = deltat - offset
        window_stop  = window_start + 30

        l_delim = (" >> " if step == 0 else "")
        r_delim = (" <<"  if step == 0 else "")

        if (full_time):
            t_start = time.strftime ("%H:%M:%S", time.localtime(tsecs + window_start))
            t_stop  = time.strftime ("%H:%M:%S", time.localtime(tsecs + window_stop))

            print ("OTP (%8s .. %8s):%4s%06d%s" % (t_start, t_stop, l_delim, token, r_delim))
        else:
            s_start = ("0" if window_start == 0 else "%+3d" % window_start)
            s_stop  = ("0" if window_stop  == 0 else "%+3d" % window_stop)

            print ("OTP (%4ss .. %4ss):%4s%06d%s" % (s_start, s_stop, l_delim, token, r_delim))


def main (argv):
    configpath = os.path.join (os.environ['HOME'], '.config', 'totp')
    configfile = os.path.join (configpath, 'totp.conf')

    parser = argparse.ArgumentParser(description='Command line TOPT generator')

    parser.add_argument('-c', '--config', metavar='FILE',
            default=configfile,
            help="location of the configfile (default %s)" % configfile)
    parser.add_argument('-l', '--list', action="store_true", default=False,
            help="List available SECRET-IDS of configfile")
    parser.add_argument('-q', '--quiet', action="store_true", default=False,
            help="Quiet mode (non-interactive)")

    parser.add_argument('sid',metavar='SECRETS-ID', nargs='?', help='Select secret of configfile')

    args = parser.parse_args()

    # config
    configfile = args.config
    initconfig (configfile, not args.quiet)
    config = getconfig (configfile)

    if (args.list):
        if (not args.quiet): print ('Available secret-ids:')
        for t in config['secrets']:
            print ('  ' + t)
        exit(0)

    sid = args.sid
    if (sid == None):
        parser.print_usage()
        exit(1)

    if (sid not in config['secrets']):
        print ('Secret %s has not been found in configfile %s' % (sid, configfile))
        for t in config['secrets']:
            print ('  ' + t)
        exit(1)

    secret = config['secrets'][sid]

    steps_pre  = 2
    steps_post = 2
    try:
        steps_pre  = config['display'].getint('steps-pre')
        if steps_pre < 0:
            steps_pre = 0
    except:
        ...

    try:
        steps_post = config['display'].getint('steps-post')
        if steps_post < 0:
            steps_post = 0
    except:
        ...

    full_time = False
    try:
        full_time = config['display'].getboolean('full-time')
    except:
        ...

    printtotp (secret, steps_pre, steps_post, full_time)

if __name__ == "__main__":
   main(sys.argv[1:])
